/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaz;

import arbolGenealogico.Arbol;
import arbolGenealogico.Integrante;
import arbolGenealogico.JSON;
import arbolGenealogico.NodoArbol;
import arbolGenealogico.Nodo;
import arbolGenealogico.Lista;

import org.graphstream.graph.*;
import org.graphstream.graph.implementations.SingleGraph;
import org.graphstream.ui.swing_viewer.SwingViewer;
import org.graphstream.ui.swing_viewer.ViewPanel;
import org.graphstream.ui.view.ViewerPipe;
import org.graphstream.ui.view.ViewerListener;
import org.graphstream.ui.view.Viewer;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import javax.swing.filechooser.FileNameExtensionFilter;
/**
 *
 * @author veron
 */
public class VentanaArbolGenealogico extends javax.swing.JFrame  {

    private ViewerPipe viewerPipe;
    private boolean loopActive = true;
    private Graph graph; // Grafo generado
    private Arbol arbol; // Referencia al árbol cargado

    public VentanaArbolGenealogico() {
        initComponents();
        panelGrafo.setLayout(new BorderLayout());
    }
    
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        cargarArbol = new javax.swing.JButton();
        actualizarGrafo = new javax.swing.JButton();
        activarListener = new javax.swing.JButton();
        panelGrafo = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(247, 244, 233));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Roboto Medium", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(75, 46, 25));
        jLabel5.setText("Árbol Genealógico");
        jLabel5.setToolTipText("");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        cargarArbol.setText("Añadir Árbol JSON");
        cargarArbol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarArbolActionPerformed(evt);
            }
        });
        jPanel2.add(cargarArbol, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 20, -1, -1));

        actualizarGrafo.setText("Actualizar Grafo");
        actualizarGrafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarGrafoActionPerformed(evt);
            }
        });
        jPanel2.add(actualizarGrafo, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 20, -1, -1));

        activarListener.setText("Activar Listener");
        activarListener.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activarListenerActionPerformed(evt);
            }
        });
        jPanel2.add(activarListener, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 20, -1, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1030, 80));

        jLabel1.setText("aqui ira el grafo");
        panelGrafo.add(jLabel1);

        jPanel1.add(panelGrafo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 1030, 570));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1030, 650));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cargarArbolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarArbolActionPerformed
       JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Selecciona un archivo JSON de árbol genealógico");

        // Filtrar para que solo permita archivos JSON
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos JSON", "json");
        fileChooser.setFileFilter(filter);

        int resultado = fileChooser.showOpenDialog(this);

        if (resultado == JFileChooser.APPROVE_OPTION) {
            File archivoSeleccionado = fileChooser.getSelectedFile();
            String rutaArchivo = archivoSeleccionado.getAbsolutePath();

            JSON json = new JSON(rutaArchivo);
            try {
                arbol = json.cargarDesdeJSON(); // Cargar el árbol desde JSON
                graph = arbol.generarGrafo(); // Generar el grafo a partir del árbol

                // Validar si el grafo tiene contenido
                if (graph.getNodeCount() == 0) {
                    JOptionPane.showMessageDialog(this, "El grafo está vacío. No hay datos para mostrar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                mostrarGrafoEnPanel(); // Mostrar el grafo en el panel
                JOptionPane.showMessageDialog(this, "Cargado exitosamente: Árbol de la Casa " + arbol.getLinaje(), "Éxito", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error al cargar el archivo JSON: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_cargarArbolActionPerformed

    private void actualizarGrafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarGrafoActionPerformed
        if (graph != null) {
            mostrarGrafoEnPanel();
        } else {
            JOptionPane.showMessageDialog(this, "No hay grafo cargado.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_actualizarGrafoActionPerformed

    private void activarListenerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activarListenerActionPerformed

    }//GEN-LAST:event_activarListenerActionPerformed
  
 private void mostrarGrafoEnPanel() {
        panelGrafo.removeAll();

        if (graph != null) {
            graph.setAttribute("ui.stylesheet", getGraphStyle());
            graph.setAttribute("ui.quality");
            graph.setAttribute("ui.antialias");

            SwingViewer viewer = new SwingViewer(graph, Viewer.ThreadingModel.GRAPH_IN_GUI_THREAD);
            viewer.enableAutoLayout();
            ViewPanel viewerPanel = (ViewPanel) viewer.addDefaultView(false);

            agregarNodosAlGrafo();

            // Configura el ViewerPipe
            viewerPipe = viewer.newViewerPipe();
            viewerPipe.addViewerListener(new ViewerListener() {
                @Override
                public void viewClosed(String viewName) {
                    System.out.println("Vista cerrada.");
                }

                @Override
                public void buttonPushed(String id) {
                    System.out.println("Nodo presionado: " + id);
                    Node clickedNode = graph.getNode(id);
                    if (clickedNode != null) {
                        Integrante integrante = (Integrante) clickedNode.getAttribute("integrante");
                        System.out.println("Integrante: " + (integrante != null ? integrante.getNombreCompleto() : "No encontrado"));
                    } else {
                        System.out.println("Nodo no encontrado.");
                    }
                }

                @Override
                public void buttonReleased(String id) {
                    System.out.println("Nodo soltado: " + id);
                }

                @Override
                public void mouseLeft(String id) {
                    System.out.println("Ratón salió del nodo: " + id);
                }

                @Override
                public void mouseOver(String id) {
                    System.out.println("Ratón sobre el nodo: " + id);
                }
            });

            iniciarProcesamientoEventos();
            
            panelGrafo.add(viewerPanel, BorderLayout.CENTER);
            panelGrafo.revalidate();
            panelGrafo.repaint();
        } else {
            JOptionPane.showMessageDialog(this, "El grafo está vacío.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void iniciarProcesamientoEventos() {
        System.out.println("Iniciando procesamiento de eventos...");
        Thread thread = new Thread(() -> {
            while (true) {
                try {
                    viewerPipe.pump(); // Procesar eventos
                    System.out.println("Procesando eventos...");
                    Thread.sleep(100); // Intervalo entre procesamientos
                } catch (InterruptedException e) {
                    System.out.println("Error en el procesamiento de eventos: " + e.getMessage());
                }
            }
        });
        thread.setDaemon(true);
        thread.start();
    }

    private void agregarNodosAlGrafo() {
        if (arbol != null) {
            Lista nodos = arbol.getTodosLosNodos();
            Nodo actual = nodos.getInicio();

            while (actual != null) {
                NodoArbol nodo = (NodoArbol) actual.getInfo();
                String nombreNodo = nodo.getIntegrante().getNombreCompleto();

                if (graph.getNode(nombreNodo) == null) {
                    Node graphNode = graph.addNode(nombreNodo);
                    graphNode.setAttribute("integrante", nodo.getIntegrante());
                    graphNode.setAttribute("ui.label", nodo.getIntegrante().getNombreCompleto());
                    graphNode.setAttribute("ui.class", "clickable");
                    System.out.println("Nodo creado: " + nombreNodo);
                    System.out.println("Atributos del nodo:");
                    System.out.println("  ui.label: " + graphNode.getAttribute("ui.label"));
                    System.out.println("  ui.class: " + graphNode.getAttribute("ui.class"));
          }

                Nodo hijoActual = nodo.getHijos().getInicio();
                while (hijoActual != null) {
                    NodoArbol hijo = (NodoArbol) hijoActual.getInfo();
                    String hijoNombre = hijo.getIntegrante().getNombreCompleto();

                    if (graph.getEdge(nombreNodo + "->" + hijoNombre) == null) {
                        graph.addEdge(nombreNodo + "->" + hijoNombre, nombreNodo, hijoNombre, true);
                    }
                    hijoActual = hijoActual.getSiguiente();
                }
                actual = actual.getSiguiente();
            }
        }
    }

    private String getGraphStyle() {
        return "node {" +
            "   fill-color: #6baed6;" +
            "   size: 30px;" +
            "   text-size: 14px;" +
            "   text-color: black;" +
            "   stroke-mode: plain;" +
            "   stroke-color: #2171b5;" +
            "   stroke-width: 2px;" +
            "}" +
            "edge {" +
            "   fill-color: #b2df8a;" +
            "   size: 2px;" +
            "}" +
            "graph {" +
            "   padding: 50px;" +
            "   fill-color: white;" +
            "}";
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton activarListener;
    private javax.swing.JButton actualizarGrafo;
    private javax.swing.JButton cargarArbol;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel panelGrafo;
    // End of variables declaration//GEN-END:variables

}